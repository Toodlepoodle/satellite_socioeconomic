# Satellite Socioeconomic Analysis Tool

A Python tool for generating socioeconomic variables from satellite imagery to analyze economic impacts of sand mining and other activities. This tool creates panel datasets that can be used for rigorous economic analysis including difference-in-differences studies, time series analysis, and spatial economic research.

## üìã Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Literature Foundation](#literature-foundation)
- [Installation](#installation)
- [Quick Start](#quick-start)
- [Detailed Usage](#detailed-usage)
- [Variables Generated](#variables-generated)
- [Configuration](#configuration)
- [Examples](#examples)
- [Output Format](#output-format)
- [Troubleshooting](#troubleshooting)
- [Contributing](#contributing)
- [Citation](#citation)

## üìñ Overview

This tool addresses a critical gap in economic research by providing an automated way to generate socioeconomic indicators from freely available satellite imagery. It's particularly useful for:

- **Development Economics**: Measuring poverty, inequality, and economic development
- **Environmental Economics**: Analyzing impacts of mining, deforestation, urbanization
- **Regional Economics**: Comparing economic conditions across different areas
- **Policy Evaluation**: Before/after analysis of interventions or policy changes

### Key Innovation

Unlike traditional surveys that are expensive and infrequent, this tool provides:
- **High temporal frequency**: Monthly, quarterly, or yearly data
- **Comprehensive coverage**: Any location with satellite coverage
- **Cost-effective**: Uses free satellite data sources
- **Standardized metrics**: Consistent measurements across regions and time

## ‚ú® Features

### üõ∞Ô∏è Multi-Source Satellite Data
- **Nighttime Lights**: VIIRS data for economic activity measurement
- **Vegetation Indices**: Landsat-8 for agricultural and rural development indicators
- **Built Environment**: Population density and urban development metrics
- **Environmental Variables**: Climate, topography, and natural conditions

### üìä Advanced Analytics
- **Panel Data Generation**: Time series data across multiple regions
- **Distance Analysis**: Proximity effects from points of interest (e.g., mining sites)
- **Temporal Aggregation**: Flexible time periods (monthly, quarterly, yearly)
- **Correlation Analysis**: Built-in statistical analysis tools

### üîß User-Friendly Design
- **Simple Configuration**: YAML-based settings
- **Flexible Input**: Works with any shapefile format
- **Multiple Outputs**: CSV, visualizations, and summary statistics
- **Error Handling**: Robust error management and logging

## üìö Literature Foundation

This tool is based on cutting-edge research in satellite-based socioeconomic analysis:

### Core Methodology Papers
- **Jean et al. (2016)**: "Combining satellite imagery and machine learning to predict poverty" - *Science*
- **Burke et al. (2020)**: "Using publicly available satellite imagery and deep learning to understand economic well-being in Africa" - *Nature Communications*
- **Henderson et al. (2012)**: "Measuring economic growth from outer space" - *American Economic Review*

### Nighttime Lights Literature
- **Elvidge et al. (1997)**: Foundational work on nighttime lights as economic indicators
- **Doll et al. (2006)**: Regional economic activity mapping from nighttime satellite imagery
- **Gibson et al. (2020)**: Comprehensive evaluation of nighttime lights for economic analysis

### Vegetation and Environmental Indicators
- **Puttanapong et al. (2020)**: Multi-source poverty prediction in Thailand
- **Steele et al. (2017)**: Mapping poverty using mobile phone and satellite data
- **Combinido et al. (2023)**: Multi-source satellite imagery for poverty mapping in Indonesia

### Mining Impact Studies
- **Maus et al. (2020)**: Global mining footprint from high-resolution satellite imagery
- **D-Lab Berkeley**: Sand mining detection and socioeconomic impact analysis
- **Werner et al. (2020)**: Environmental impacts of critical mineral extraction

## üõ†Ô∏è Installation

### Prerequisites
- **Python 3.9** (recommended)
- **Google Earth Engine account** (free)
- **Git** (for cloning repository)

### Step 1: Clone Repository
```bash
git clone https://github.com/yourusername/satellite-socioecon.git
cd satellite-socioecon
```

### Step 2: Create Virtual Environment
```bash
# Using conda (recommended)
conda create -n satellite-analysis python=3.9
conda activate satellite-analysis

# Or using pip
python -m venv satellite-analysis
source satellite-analysis/bin/activate  # On Windows: satellite-analysis\Scripts\activate
```

### Step 3: Install Dependencies
```bash
pip install -r requirements.txt
```

### Step 4: Set Up Google Earth Engine

#### Option A: Interactive Authentication (Recommended for beginners)
```bash
earthengine authenticate
```
This will open a web browser for authentication.

#### Option B: Service Account (For automated/server use)
1. Go to [Google Cloud Console](https://console.cloud.google.com/)
2. Create a new project or select existing one
3. Enable Earth Engine API
4. Create a service account and download JSON key
5. Set environment variable:
```bash
export GOOGLE_APPLICATION_CREDENTIALS="path/to/your/service-account-key.json"
```

### Step 5: Verify Installation
```bash
python -c "import ee; ee.Initialize(); print('‚úì Google Earth Engine initialized successfully')"
```

## üöÄ Quick Start

### 1. Create Test Data
```bash
cd examples
python create_test_data.py
```

This creates sample regions and mining sites for testing.

### 2. Run Basic Analysis
```bash
python main.py \
  --regions data/test_regions.geojson \
  --start_date 2022-01-01 \
  --end_date 2023-12-31 \
  --mining_sites data/test_mining_sites.geojson \
  --output my_first_analysis.csv
```

### 3. View Results
```bash
# Check the output file
head my_first_analysis.csv

# Run example with visualizations
cd examples
python example_usage.py
```

## üìñ Detailed Usage

### Command Line Interface

```bash
python main.py [OPTIONS]
```

#### Required Arguments
- `--regions`: Path to shapefile/geojson with regions to analyze
- `--start_date`: Start date in YYYY-MM-DD format
- `--end_date`: End date in YYYY-MM-DD format

#### Optional Arguments
- `--mining_sites`: Path to mining sites shapefile (for distance analysis)
- `--output`: Output CSV filename (default: panel_data.csv)

### Python API Usage

```python
from data_processor import SocioEconomicProcessor

# Initialize processor
processor = SocioEconomicProcessor()

# Generate panel data
df = processor.create_panel_data(
    regions_shapefile='my_regions.shp',
    start_date='2020-01-01',
    end_date='2023-12-31',
    mining_sites_shapefile='mining_sites.shp',
    output_file='analysis_results.csv'
)

# Basic statistics
print(df.describe())

# Time series by region
region_trends = df.groupby(['region_id', 'period']).mean()
```

### Working with Your Own Data

#### Region Shapefiles
Your regions shapefile should contain:
- **Geometry**: Polygon geometries defining study areas
- **Attributes**: Any additional region characteristics
- **Coordinate System**: WGS84 (EPSG:4326) preferred

Example region attributes:
```
NAME | ADMIN_LEVEL | POPULATION | AREA_KM2
District_A | District | 100000 | 500
District_B | District | 150000 | 750
```

#### Mining Sites Data
Your mining sites should contain:
- **Geometry**: Point geometries for mine locations
- **Attributes**: Mine type, operational status, etc.

Example mining site attributes:
```
NAME | TYPE | STATUS | START_DATE
Mine_1 | Sand Mining | Active | 2015-01-01
Mine_2 | Gravel | Inactive | 2010-05-15
```

## üìä Variables Generated

### Economic Activity Indicators

#### Nighttime Lights (VIIRS)
- **nighttime_lights_mean**: Average radiance (economic activity proxy)
- **nighttime_lights_sum**: Total radiance (total economic output proxy)

*Research basis*: Strong correlation with GDP (r=0.7-0.9), income per capita, and poverty rates.

#### Built Environment
- **built_up_area**: Total built-up area (urban development)
- **population_count**: Estimated population (from GHSL data)

### Rural Development Indicators

#### Vegetation Indices (Landsat-8)
- **ndvi_mean**: Normalized Difference Vegetation Index (agricultural productivity)
- **ndvi_std**: NDVI standard deviation (agricultural diversity)
- **built_up_index**: Normalized Difference Built-up Index (urbanization)

*Research basis*: NDVI correlates with agricultural productivity, food security, and rural poverty.

### Environmental Variables

#### Climate Indicators
- **precipitation_mean**: Average precipitation (agricultural conditions)
- **temperature_mean**: Average land surface temperature (climate stress)

#### Topographic Features
- **elevation_mean**: Average elevation (geographic constraints)

### Spatial Relationship Variables

#### Distance Metrics
- **distance_to_mining**: Minimum distance to nearest mining site (meters)

*Use case*: Essential for difference-in-differences analysis and spatial impact assessment.

## ‚öôÔ∏è Configuration

### Modifying config.py

```python
# Temporal settings
ANALYSIS_CONFIG = {
    'temporal_frequency': 'quarterly',  # Options: 'monthly', 'quarterly', 'yearly'
    'distance_buffers': [1000, 5000, 10000],  # Buffer distances in meters
    'variables': [
        'nighttime_lights_mean',
        'ndvi_mean',
        # Add/remove variables as needed
    ]
}

# Satellite data settings
SATELLITE_CONFIG = {
    'landsat': {
        'scale': 30,  # Spatial resolution in meters
        'cloud_filter': 20,  # Maximum cloud cover percentage
    }
}
```

### Custom Variable Extraction

To add new variables, modify `satellite_extractor.py`:

```python
def extract_custom_variable(self, geometry, start_date, end_date):
    """Extract your custom satellite-derived variable"""
    try:
        # Your Google Earth Engine code here
        collection = ee.ImageCollection('YOUR_COLLECTION')
        # Process and return results
        return {'custom_var': processed_value}
    except Exception as e:
        return {'custom_var': np.nan}
```

## üí° Examples

### Example 1: Sand Mining Impact Study

```python
# Analyze impact of sand mining on local economies
df = processor.create_panel_data(
    regions_shapefile='river_districts.shp',
    start_date='2015-01-01',
    end_date='2023-12-31',
    mining_sites_shapefile='sand_mines.shp'
)

# Create treatment/control groups based on proximity
df['treated'] = df['distance_to_mining'] < 5000  # Within 5km

# Difference-in-differences analysis
import pandas as pd
df['post_mining'] = pd.to_datetime(df['start_date']) > '2018-01-01'

# Calculate DiD estimator
did_results = df.groupby(['treated', 'post_mining'])['nighttime_lights_mean'].mean()
```

### Example 2: Regional Development Monitoring

```python
# Monitor regional development over time
df = processor.create_panel_data(
    regions_shapefile='admin_districts.shp',
    start_date='2020-01-01',
    end_date='2023-12-31'
)

# Calculate development index
df['development_index'] = (
    df['nighttime_lights_mean'].rank() * 0.4 +
    df['built_up_area'].rank() * 0.3 +
    df['ndvi_mean'].rank() * 0.3
)

# Track changes over time
development_trends = df.groupby('period')['development_index'].mean()
```

### Example 3: Environmental Impact Assessment

```python
# Assess environmental impacts of development
correlations = df[['nighttime_lights_mean', 'ndvi_mean', 'precipitation_mean']].corr()

# Visualize relationships
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='nighttime_lights_mean', y='ndvi_mean', 
                hue='distance_to_mining', size='population_count')
plt.title('Economic Activity vs. Vegetation (by Mining Proximity)')
plt.show()
```

## üìà Output Format

### CSV Structure
```csv
region_id,region_name,period,start_date,end_date,nighttime_lights_mean,nighttime_lights_sum,ndvi_mean,ndvi_std,built_up_area,population_count,precipitation_mean,temperature_mean,elevation_mean,distance_to_mining
0,Region_0_0,2022-Q1,2022-01-01,2022-04-01,2.34,145.67,0.45,0.12,234.5,15000,2.3,25.4,234.5,5678.9
0,Region_0_0,2022-Q2,2022-04-01,2022-07-01,2.45,156.78,0.52,0.14,238.1,15200,2.1,27.8,234.5,5678.9
...
```

### Key Columns Explained

#### Identifiers
- **region_id**: Numeric identifier for each region
- **region_name**: Human-readable region name
- **period**: Time period (e.g., "2022-Q1", "2022-01", "2022")

#### Temporal
- **start_date**: Period start date
- **end_date**: Period end date

#### Variables
- All socioeconomic variables as described in [Variables Generated](#variables-generated)

### Statistical Summary

The tool automatically generates summary statistics:

```
SUMMARY STATISTICS
==================
Variable                  Mean     Std      Min      Max
nighttime_lights_mean     2.34     1.45     0.01     8.90
ndvi_mean                 0.45     0.15     0.12     0.78
population_count       12450.00  5678.23  1200.00  45000.00
distance_to_mining      8765.43  4321.56   234.56  15678.90
```

## üîß Troubleshooting

### Common Issues

#### 1. Google Earth Engine Authentication Error
```
Error: Please authorize access to your Earth Engine account
```

**Solution:**
```bash
earthengine authenticate
# Follow the web browser authentication process
```

#### 2. Memory Issues with Large Datasets
```
Error: User memory limit exceeded
```

**Solutions:**
- Reduce spatial resolution in `config.py`
- Process smaller time periods
- Use smaller regions

```python
# In config.py, increase scale (lower resolution)
SATELLITE_CONFIG = {
    'landsat': {
        'scale': 100,  # Instead of 30
    }
}
```

#### 3. Missing Data for Certain Regions
Some regions may return zero values due to:
- Cloud cover (for optical data)
- Data gaps in satellite collections
- Geometric issues

**Solutions:**
- Increase time period for analysis
- Adjust cloud filtering thresholds
- Validate input geometries

#### 4. Slow Processing
**Solutions:**
- Process fewer regions at once
- Use coarser temporal resolution
- Increase scale parameters

### Error Handling

The tool includes robust error handling:

```python
try:
    variables = self.extract_variables_for_region(geometry, start_date, end_date)
except Exception as e:
    print(f"Error processing region {region_name}: {e}")
    # Returns default values instead of crashing
    return default_variables
```

### Validation

Validate your results:

```python
# Check for reasonable value ranges
assert df['nighttime_lights_mean'].min() >= 0
assert df['ndvi_mean'].between(-1, 1).all()

# Check for temporal consistency
assert df.groupby('region_id')['period'].nunique().min() > 1

# Verify geographic coverage
print(f"Processed {df['region_id'].nunique()} regions")
print(f"Date range: {df['start_date'].min()} to {df['end_date'].max()}")
```

## ü§ù Contributing

We welcome contributions! Here's how to help:

### 1. Reporting Issues
- Use GitHub Issues for bug reports
- Include error messages and system information
- Provide sample data when possible

### 2. Adding Features
1. Fork the repository
2. Create a feature branch
3. Add your feature with tests
4. Submit a pull request

### 3. Improving Documentation
- Fix typos or unclear explanations
- Add more examples
- Translate to other languages

### Priority Development Areas
- **Additional satellite data sources**: Sentinel-2, MODIS, etc.
- **Advanced ML models**: CNN-based feature extraction
- **Real-time processing**: Automated updates
- **Web interface**: Browser-based analysis tool

## üìÑ Citation

If you use this tool in your research, please cite:

```bibtex
@software{satellite_socioecon_2024,
  title={Satellite Socioeconomic Analysis Tool},
  author={Your Name},
  year={2024},
  url={https://github.com/yourusername/satellite-socioecon},
  note={A Python tool for generating socioeconomic variables from satellite imagery}
}
```

### Academic References

Also consider citing the foundational research:

```bibtex
@article{jean2016combining,
  title={Combining satellite imagery and machine learning to predict poverty},
  author={Jean, Neal and Burke, Marshall and Xie, Michael and Davis, W Matthew and Lobell, David B and Ermon, Stefano},
  journal={Science},
  volume={353},
  number={6301},
  pages={790--794},
  year={2016}
}

@article{burke2020using,
  title={Using publicly available satellite imagery and deep learning to understand economic well-being in Africa},
  author={Burke, Marshall and Driscoll, Anne and Lobell, David B and Ermon, Stefano},
  journal={Nature Communications},
  volume={11},
  number={1},
  pages={1--11},
  year={2020}
}
```

## üìß Support

For questions and support:

- **GitHub Issues**: Bug reports and feature requests
- **Email**: your.email@example.com
- **Documentation**: See `docs/` folder for detailed guides

## üìú License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

**Happy analyzing! üõ∞Ô∏èüìä**

*This tool democratizes access to socioeconomic data by leveraging the power of satellite imagery and modern data science techniques. We hope it advances research in development economics, environmental science, and policy evaluation.*